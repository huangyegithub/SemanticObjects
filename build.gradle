plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.6.21'
    id 'com.github.johnrengelman.shadow' version '5.2.0'
    id 'antlr'
    id "kr.motd.sphinx" version "2.10.0"
    id 'scala'
}
group = 'org.smolang'
version = '0.3'
sourceCompatibility = '1.11'

repositories {
    mavenCentral()
//    maven { url "https://overture.au.dk/artifactory/libs-release/" }
}

test {
    useJUnitPlatform()
}
sourceSets {
    main {
        java.srcDirs += 'build/generated-src/main'
        kotlin.srcDirs += 'build/generated-src/main'
        antlr.srcDirs += 'src/main/antlr'
    }
}
dependencies {
    implementation 'com.google.guava:guava:22.0'
    testImplementation 'io.kotest:kotest-runner-junit5:5.2.3'
    testImplementation 'org.jetbrains.kotlin:kotlin-test-junit'
    testImplementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation 'com.github.ajalt.clikt:clikt:3.4.2'
    implementation 'org.antlr:antlr4:4.8'
    antlr 'org.antlr:antlr4:4.8'
    implementation 'net.sourceforge.owlapi:org.semanticweb.hermit:1.4.5.519'
    implementation 'org.slf4j:slf4j-simple:1.7.25'
    implementation 'org.apache.jena:apache-jena-libs:3.16.0'
    implementation 'org.apache.jena:jena-core:3.16.0'
    implementation 'org.siani.javafmi:fmu-wrapper:2.26.3'
    implementation "com.influxdb:influxdb-client-kotlin:2.3.0"
    implementation 'com.sksamuel.hoplite:hoplite-core:1.4.1'
    implementation 'com.sksamuel.hoplite:hoplite-yaml:1.4.1'
    implementation 'com.github.owlcs:ontapi:2.1.0'
    implementation 'org.jline:jline:3.21.0'
//    implementation "into-cps:scenario_verifier_2.13:0.2.14"
}


generateGrammarSource {
    outputDirectory = file("build/generated-src/main/no/uio/microobject/antlr")
    arguments += ["-visitor"]
}

compileKotlin {
    kotlinOptions.jvmTarget = project.sourceCompatibility
}
compileKotlin.dependsOn generateGrammarSource

jar {
    archiveFileName='smol.jar'
    manifest {
        attributes 'Main-Class': 'no.uio.microobject.main.MainKtKt'
        /*
        In Kotlin, when you write a top-level function (like main()) in a file named MainKt.kt, the Kotlin compiler generates a Java class with the name MainKtKt.
        1. First Kt is added to the file name because it is a Kotlin file, making it MainKt.
        2. Another Kt is added when generating the Java class that contains the top-level functions, making it MainKtKt.
        This double Kt naming pattern is part of how Kotlin implements top-level functions when compiling to JVM bytecode, since Java requires all functions to be inside a class. The compiler needs to create a class to hold these top-level functions, and it uses this naming convention to avoid conflicts.
        So in this case:
        - The source file is MainKt.kt.
        - The generated class is MainKtKt.
        - The manifest needs to reference the generated class name MainKtKt.
         */
    }
}
shadowJar {
    archiveFileName='smol.jar'
}
assemble.dependsOn shadowJar

sphinx {
    // Documentation at
    // https://trustin.github.io/sphinx-gradle-plugin/index.html
    sourceDirectory = "${projectDir}/website/source"
    configDirectory = "${projectDir}/website/source"
    outputDirectory = "${projectDir}/website/build/html"
    builder = "html"
}
clean {
    delete files("${projectDir}/website/build")
}
