class List<LISTT>(LISTT content, List<LISTT> next)

    Int length()
        if this.next = null then return 1;
        else Int n := this.next.length(); return n + 1;
        end
    end

    Int append(List<LISTT> last)
        if this.next = null then
            this.next := last;
        else
            this.next.append(last);
        end
        return 0;
    end

    Boolean containsSameUri(LISTT element)
        if this.content.uri = element.uri then // add your condition on .uri here
            return True;
        else
            if this.next = null then
                return False;
            else
                Boolean res := this.next.containsSameUri(element);
                return res;
            end
        end
    end


    List<LISTT> noDuplicates()
        if(this.next = null) then
            List<LISTT> ln := new List<LISTT>(this.content, null);
            return ln;
        else
            LISTT current := this.content;
            Boolean isDuplicate := this.next.containsSameUri(current);
            if(isDuplicate) then
                List<LISTT> l := this.next.noDuplicates();
                return l;
            else
                List<LISTT> lnext := this.next.noDuplicates();
                List<LISTT> ll := new List<LISTT>(this.content, lnext);
                return ll;
            end
        end
    end

    LISTT get(Int i)
        LISTT res := this.content;
        if i >= 1 then
            res := this.next.get(i-1);
        end
        return res;
    end

    Boolean contains(LISTT element)
        if this.content = element then
            return True;
        else
            if this.next = null then
                return False;
            else
                Boolean res := this.next.contains(element);
                return res;
            end
        end
    end

    List<LISTT> reverse()
        if(this.next = null) then
            return this;
        else
            List<LISTT> ret := this.next.reverse();
            this.next.next := this;
            this.next := null;
            return ret;
        end
    end
end