main
    breakpoint; //outputs System.currentTimeMillis() as side-effect
    FMO[in Double input_u_1,
        in Double input_u_2,
        in Double input_u_3,
        in Double input_u_4,
        in Double input_u_5,
        in Double input_PM,
        out Double output_P_e,
        out Double output_dy1,
        out Double output_dy2] p1 = simulate("examples/Electro/fmus/powersystem.fmu", input_NSG = 5);
    p1.role = "powersystem1";

    print("<<<<<<<<< done power1 ");

    FMO[in Double input_u_1,
        in Double input_u_2,
        in Double input_u_3,
        in Double input_u_4,
        in Double input_u_5,
        in Double input_PM,
        out Double output_P_e,
        out Double output_dy1,
        out Double output_dy2] p2 = simulate("examples/Electro/fmus/powersystem.fmu", input_NSG = 5);
    p2.role = "powersystem2";

    print("<<<<<<<<< done power2 ");
    FMO[in Double input_u_1,
        in Double input_u_2,
        in Double input_u_3,
        in Double input_u_4,
        in Double input_u_5,
        in Double input_PM,
        out Double output_P_e,
        out Double output_dy1,
        out Double output_dy2] p3 = simulate("examples/Electro/fmus/powersystem.fmu", input_NSG = 5);
    p3.role = "powersystem3";

    print("<<<<<<<<< done power3 ");
    FMO[in Double input_u_1,
        in Double input_u_2,
        in Double input_u_3,
        in Double input_u_4,
        in Double input_u_5,
        in Double input_PM,
        out Double output_P_e,
        out Double output_dy1,
        out Double output_dy2] p4 = simulate("examples/Electro/fmus/powersystem.fmu", input_NSG = 5);
    p4.role = "powersystem4";


    print("<<<<<<<<< done power4 ");
    FMO[in Double input_u_1,
        in Double input_u_2,
        in Double input_u_3,
        in Double input_u_4,
        in Double input_u_5,
        in Double input_PM,
        out Double output_P_e,
        out Double output_dy1,
        out Double output_dy2] p5 = simulate("examples/Electro/fmus/powersystem.fmu", input_NSG = 5);
    p5.role = "powersystem5";
    print("<<<<<<<<< done power5");


    FMO[in Double input_estimated_angle_FMU_1,
        in Double input_estimated_angle_FMU_2,
        in Double input_estimated_angle_FMU_3,
        in Double input_estimated_angle_FMU_4,
        in Double input_estimated_angle_FMU_5,
        in Double input_estimated_omega_FMU_1,
        in Double input_estimated_omega_FMU_2,
        in Double input_estimated_omega_FMU_3,
        in Double input_estimated_omega_FMU_4,
        in Double input_estimated_omega_FMU_5,
        out Double output_pm1,
        out Double output_pm2,
        out Double output_pm3,
        out Double output_pm4,
        out Double output_pm5,
        out Double output_p_e_1,
        out Double output_p_e_2,
        out Double output_p_e_3,
        out Double output_p_e_4,
        out Double output_p_e_5
       ] ctrl = simulate("examples/Electro/fmus/controller.fmu", input_states = 10);
    ctrl.role = "controller";
    print("<<<<<<<<< done controller");


    FMO[in Double input_pm1,
        in Double input_pm2,
        in Double input_pm3,
        in Double input_pm4,
        in Double input_pm5,
        in Double input_pe1,
        in Double input_pe2,
        in Double input_pe3,
        in Double input_pe4,
        in Double input_pe5,
        in Double input_states_1,
        in Double input_states_2,
        in Double input_states_3,
        in Double input_states_4,
        in Double input_states_5,
        in Double input_states_6,
        out Double output_states_1,
        out Double output_states_2,
        out Double output_states_3,
        out Double output_states_4,
        out Double output_k2_1,
        out Double output_k2_2,
        out Double output_k3_1,
        out Double output_k3_2,
        out Double output_k4_1,
        out Double output_k4_2] e1 = simulate("examples/Electro/fmus/estimator_scen1_1.fmu");
    e1.role = "estimator_1";


    FMO[in Double input_pm1,
        in Double input_pm2,
        in Double input_pm3,
        in Double input_pm4,
        in Double input_pm5,
        in Double input_pe1,
        in Double input_pe2,
        in Double input_pe3,
        in Double input_pe4,
        in Double input_pe5,
        in Double input_states_1,
        in Double input_states_2,
        in Double input_states_3,
        in Double input_states_4,
        in Double input_k2_1,
        in Double input_k2_2,
        in Double input_k3_1,
        in Double input_k3_2,
        in Double input_k4_1,
        in Double input_k4_2,
        out Double output_states_1,
        out Double output_states_2,
        out Double output_states_3,
        out Double output_states_4,
        out Double output_states_5,
        out Double output_states_6] e2 = simulate("examples/Electro/fmus/estimator_scen1_2.fmu");
    e2.role = "estimator_2";

    //print("finished loading");
    //breakpoint; //outputs System.currentTimeMillis() as side-effect


    Scenario[controller, powersystem1, powersystem2, powersystem3, powersystem4, powersystem5, estimator_1, estimator_2]
       scenario = monitor("examples/Electro/scenario1.conf");

    scenario.assign(p1);
    scenario.assign(p2);
    scenario.assign(p3);
    scenario.assign(p4);
    scenario.assign(p5);
    scenario.assign(ctrl);
    scenario.assign(e1);
    scenario.assign(e2);

    scenario.check();

    Double stepSize = 0.001;
    Double count = 0.0;
    Double stop = 1.0;

    e2.input_k4_2 = e1.output_k4_2;
    e2.input_k3_1 = e1.output_k3_1;
    e2.input_k4_1 = e1.output_k4_1;
    Double v1 = ctrl.output_pm2;
    e1.input_pm2 = v1;
    p2.input_PM = v1;
    e2.input_pm2 = v1;
    Double v2 = e2.output_states_4;
    ctrl.input_estimated_omega_FMU_1 = v2;
    e1.input_states_4 = v2;
    e2.input_k2_2 = e1.output_k2_2;
    e2.input_k3_2 = e1.output_k3_2;
    Double v3 = e2.output_states_2;
    ctrl.input_estimated_angle_FMU_2 = v3;
    e1.input_states_2 = v3;
    Double v4 = e2.output_states_6;
    e1.input_states_6 = v4;
    ctrl.input_estimated_omega_FMU_3 = v4;
    Double v5 = e2.output_states_1;
    ctrl.input_estimated_angle_FMU_1 = v5;
    e1.input_states_1 = v5;

    Double v6 = e1.output_states_2;
    ctrl.input_estimated_angle_FMU_5 = v6;
    e2.input_states_2 = v6;
    Double v7 = e1.output_states_1;
    ctrl.input_estimated_angle_FMU_4 = v7;
    e2.input_states_1 = v7;
    Double v8 = p5.output_P_e;
    e1.input_pe5 = v8;
    e2.input_pe5 = v8;
    Double v9 = e2.output_states_5;
    ctrl.input_estimated_omega_FMU_2 = v9;
    e1.input_states_5 = v9;

    Double v10 = e2.output_states_3;
    e1.input_states_3 = v10;
    ctrl.input_estimated_angle_FMU_3 = v10;
    Double v11 = ctrl.output_pm1;
    p1.input_PM = v11;
    e1.input_pm1 = v11;
    e2.input_pm1 = v11;
    Double v12 = p2.output_P_e;
    e2.input_pe2 = v12;
    e1.input_pe2 = v12;
    Double v13 = p4.output_P_e;
    e1.input_pe4 = v13;
    e2.input_pe4 = v13;
    Double v14 = ctrl.output_pm5;
    e2.input_pm5 = v14;
    p5.input_PM = v14;
    e1.input_pm5 = v14;
    Double v15 = p3.output_dy1;
    p1.input_u_3 = v15;
    p5.input_u_3 = v15;
    p2.input_u_3 = v15;
    p4.input_u_3 = v15;
    Double v16 = ctrl.output_pm4;
    e2.input_pm4 = v16;
    e1.input_pm4 = v16;
    p4.input_PM = v16;
    Double v17 = ctrl.output_pm3;
    e1.input_pm3 = v17;
    p3.input_PM = v17;
    e2.input_pm3 = v17;
    e2.input_k2_1 = e1.output_k2_1;
    Double v18 = p1.output_P_e;
    e1.input_pe1 = v18;
    e2.input_pe1 = v18;
    Double v19 = p3.output_P_e;
    e2.input_pe3 = v19;
    e1.input_pe3 = v19;
    Double v20 = p5.output_dy1;
    p3.input_u_5 = v20;
    p4.input_u_5 = v20;
    p2.input_u_5 = v20;
    p1.input_u_5 = v20;
    Double v21 = p2.output_dy1;
    p3.input_u_2 = v21;
    p1.input_u_2 = v21;
    p4.input_u_2 = v21;
    p5.input_u_2 = v21;
    Double v22 = p4.output_dy1;
    p5.input_u_4 = v22;
    p1.input_u_4 = v22;
    p3.input_u_4 = v22;
    p2.input_u_4 = v22;
    Double v23 = e1.output_states_4;
    e2.input_states_4 = v23;
    ctrl.input_estimated_omega_FMU_5 = v23;
    Double v24 = p1.output_dy1;
    p2.input_u_1 = v24;
    p5.input_u_1 = v24;
    p4.input_u_1 = v24;
    p3.input_u_1 = v24;
    Double v25 = e1.output_states_3;
    ctrl.input_estimated_omega_FMU_4 = v25;
    e2.input_states_3 = v25;

    breakpoint; //outputs System.currentTimeMillis() as side-effect
    print("finished init total");
    while count < stop do
        p1.tick(stepSize);
        p2.tick(stepSize);
        p3.tick(stepSize);
        p4.tick(stepSize);
        p5.tick(stepSize);
        ctrl.tick(stepSize);
        e1.tick(stepSize);
        e2.tick(stepSize);

        // ctrl to ps
        p1.input_PM = ctrl.output_pm1;
        p2.input_PM = ctrl.output_pm2;
        p3.input_PM = ctrl.output_pm3;
        p4.input_PM = ctrl.output_pm4;
        p5.input_PM = ctrl.output_pm5;

        // p 1 to Other ps
        p2.input_u_1 = p1.output_dy1;
        p3.input_u_1 = p1.output_dy1;
        p4.input_u_1 = p1.output_dy1;
        p5.input_u_1 = p1.output_dy1;

        // p 2 to Other ps
        p1.input_u_2 = p2.output_dy1;
        p3.input_u_2 = p2.output_dy1;
        p4.input_u_2 = p2.output_dy1;
        p5.input_u_2 = p2.output_dy1;

        // p 3 to Other ps
        p1.input_u_3 = p3.output_dy1;
        p2.input_u_3 = p3.output_dy1;
        p4.input_u_3 = p3.output_dy1;
        p5.input_u_3 = p3.output_dy1;

        // p 4 to Other ps
        p1.input_u_4 = p4.output_dy1;
        p2.input_u_4 = p4.output_dy1;
        p3.input_u_4 = p4.output_dy1;
        p5.input_u_4 = p4.output_dy1;

        // p 5 to Other ps
        p1.input_u_5 = p5.output_dy1;
        p2.input_u_5 = p5.output_dy1;
        p3.input_u_5 = p5.output_dy1;
        p4.input_u_5 = p5.output_dy1;

        // ps to Estimator 1
        e1.input_pe1 = p1.output_P_e;
        e1.input_pe2 = p2.output_P_e;
        e1.input_pe3 = p3.output_P_e;
        e1.input_pe4 = p4.output_P_e;
        e1.input_pe5 = p5.output_P_e;

        // ctrl to Estimator - Mechanical Power
        e1.input_pm1 = ctrl.output_pm1;
        e1.input_pm2 = ctrl.output_pm2;
        e1.input_pm3 = ctrl.output_pm3;
        e1.input_pm4 = ctrl.output_pm4;
        e1.input_pm5 = ctrl.output_pm5;

        // ps to Estimator 2
        e2.input_pe1 = p1.output_P_e;
        e2.input_pe2 = p2.output_P_e;
        e2.input_pe3 = p3.output_P_e;
        e2.input_pe4 = p4.output_P_e;
        e2.input_pe5 = p5.output_P_e;

        // ctrl to Estimator - Mechanical Power
        e2.input_pm1 = ctrl.output_pm1;
        e2.input_pm2 = ctrl.output_pm2;
        e2.input_pm3 = ctrl.output_pm3;
        e2.input_pm4 = ctrl.output_pm4;
        e2.input_pm5 = ctrl.output_pm5;

        // Estimator 1 to Estimator 2
        e2.input_k2_1 = e1.output_k2_1;
        e2.input_k2_2 = e1.output_k2_2;
        e2.input_k3_1 = e1.output_k3_1;
        e2.input_k3_2 = e1.output_k3_2;
        e2.input_k4_1 = e1.output_k4_1;
        e2.input_k4_2 = e1.output_k4_2;
        e2.input_states_1 = e1.output_states_1;
        e2.input_states_2 = e1.output_states_2;
        e2.input_states_3 = e1.output_states_3;
        e2.input_states_4 = e1.output_states_4;

        // Estimator 1 to ctrl
        ctrl.input_estimated_angle_FMU_4 = e1.output_states_1;
        ctrl.input_estimated_angle_FMU_5 = e1.output_states_2;
        ctrl.input_estimated_omega_FMU_4 = e1.output_states_3;
        ctrl.input_estimated_omega_FMU_5 = e1.output_states_4;

        // Estimator 2 to Estimator 1
        e1.input_states_1 = e2.output_states_1;
        e1.input_states_2 = e2.output_states_2;
        e1.input_states_3 = e2.output_states_3;
        e1.input_states_4 = e2.output_states_4;
        e1.input_states_5 = e2.output_states_5;
        e1.input_states_6 = e2.output_states_6;

        // Estimator 2 to ctrl
        ctrl.input_estimated_angle_FMU_1 = e2.output_states_1;
        ctrl.input_estimated_angle_FMU_2 = e2.output_states_2;
        ctrl.input_estimated_angle_FMU_3 = e2.output_states_3;
        ctrl.input_estimated_omega_FMU_1 = e2.output_states_4;
        ctrl.input_estimated_omega_FMU_2 = e2.output_states_5;
        ctrl.input_estimated_omega_FMU_3 = e2.output_states_6;

        count = count + stepSize;
        print(count);
        breakpoint; //outputs System.currentTimeMillis() as side-effect
        scenario.disable(); //first iteration is good enough, all others have same algorithm
    end
    print("<< Reconfigure >>");

  FMO[in Double input_u_1,
      in Double input_u_2,
      in Double input_u_3,
      in Double input_u_4,
      in Double input_PM,
      out Double output_P_e,
      out Double output_dy1,
      out Double output_dy2] pp1 = simulate("examples/Electro/fmus/powersystem.fmu", input_NSG = 4);
  pp1.role = "powersystem1";

  FMO[in Double input_u_1,
      in Double input_u_2,
      in Double input_u_3,
      in Double input_u_4,
      in Double input_PM,
      out Double output_P_e,
      out Double output_dy1,
      out Double output_dy2] pp2 = simulate("examples/Electro/fmus/powersystem.fmu", input_NSG = 4);
  pp2.role = "powersystem2";

  FMO[in Double input_u_1,
      in Double input_u_2,
      in Double input_u_3,
      in Double input_u_4,
      in Double input_PM,
      out Double output_P_e,
      out Double output_dy1,
      out Double output_dy2] pp3 = simulate("examples/Electro/fmus/powersystem.fmu", input_NSG = 4);
  pp3.role = "powersystem3";

  FMO[in Double input_u_1,
      in Double input_u_2,
      in Double input_u_3,
      in Double input_u_4,
      in Double input_PM,
      out Double output_P_e,
      out Double output_dy1,
      out Double output_dy2] pp4 = simulate("examples/Electro/fmus/powersystem.fmu", input_NSG = 4);
  pp4.role = "powersystem4";


  FMO[in Double input_estimated_angle_FMU_1,
      in Double input_estimated_angle_FMU_2,
      in Double input_estimated_angle_FMU_3,
      in Double input_estimated_angle_FMU_4,
      in Double input_estimated_angle_FMU_5,
      in Double input_estimated_omega_FMU_1,
      in Double input_estimated_omega_FMU_2,
      in Double input_estimated_omega_FMU_3,
      in Double input_estimated_omega_FMU_4,
      in Double input_estimated_omega_FMU_5,
      out Double output_pm1,
      out Double output_pm2,
      out Double output_pm3,
      out Double output_pm4,
      out Double output_pm5,
      out Double output_p_e_1,
      out Double output_p_e_2,
      out Double output_p_e_3,
      out Double output_p_e_4,
      out Double output_p_e_5
     ] cctrl = simulate("examples/Electro/fmus/controller.fmu", input_states = 8);
  cctrl.role = "controller";

  FMO[in Double input_pm1,
      in Double input_pm2,
      in Double input_pm3,
      in Double input_pm4,
      in Double input_pe1,
      in Double input_pe2,
      in Double input_pe3,
      in Double input_pe4,
      out Double output_states_1,
      out Double output_states_2,
      out Double output_states_3,
      out Double output_states_4,
      out Double output_states_5,
      out Double output_states_6,
      out Double output_states_7,
      out Double output_states_8] ee = simulate("examples/Electro/fmus/estimator_scen2.fmu");
  ee.role = "estimator";


  //print("finished loading");

    Scenario[controller, powersystem1, powersystem2, powersystem3, powersystem4, estimator]
       sscenario = monitor("examples/Electro/scenario2.conf");

  sscenario.assign(pp1);
  sscenario.assign(pp2);
  sscenario.assign(pp3);
  sscenario.assign(pp4);
  sscenario.assign(cctrl);
  sscenario.assign(ee);

  sscenario.check();

  count = 0.0;

  /* init here */
/*
  ee.input_pe3 = pp3.output_P_e;
  ee.input_pe4 = pp4.output_P_e;
  cctrl.input_estimated_angle_FMU_1 = ee.output_states_1;
  Double x1 = cctrl.output_pm1;
  pp1.input_PM = x1;
  ee.input_pm1 = x1;
  cctrl.input_estimated_angle_FMU_4 = ee.output_states_4;
  cctrl.input_estimated_angle_FMU_2 = ee.output_states_2;
  Double x2 = ee.output_states_6;
  Double x3 = ee.output_states_7;
  Double x4 = pp1.output_dy1;
  pp4.input_u_1 = x4;
  pp3.input_u_1 = x4;
  pp2.input_u_1 = x4;
  ee.input_pe1 = cctrl.output_pm3;
  Double x5 = cctrl.output_pm3;
  pp3.input_PM = x5;
  ee.input_pm3 = x5;
  cctrl.input_estimated_omega_FMU_2 = ee.output_states_8;
  ee.input_pe2 = pp2.output_P_e;
  Double x6 = cctrl.output_pm4;
  ee.input_pm4 = x6;
  pp4.input_PM = x6;
  Double x7 = pp3.output_dy1;
  pp1.input_u_3 = x7;
  pp2.input_u_3 = x7;
  pp4.input_u_3 = x7;
  Double x8 = cctrl.output_pm2;
  ee.input_pm2 = x8;
  pp2.input_PM = x8;
  cctrl.input_estimated_omega_FMU_1 = ee.output_states_5;
  Double x9 = pp2.output_dy1;
  pp3.input_u_2 = x9;
  pp1.input_u_2 = x9;
  pp4.input_u_2 = x9;
  Double x10 = pp4.output_dy1;
  pp1.input_u_2 = x10;
  pp3.input_u_2 = x10;
  pp2.input_u_2 = x10;
  cctrl.input_estimated_angle_FMU_3 = ee.output_states_3;
*/
  breakpoint; //outputs System.currentTimeMillis() as side-effect
  print("finished init total");
  while count < stop do
      // cctrl to ps
      pp1.input_PM = cctrl.output_pm1;
      pp2.input_PM = cctrl.output_pm2;
      pp3.input_PM = cctrl.output_pm3;
      pp4.input_PM = cctrl.output_pm4;

      // p 1 to Other ps
      pp2.input_u_1 = pp1.output_dy1;
      pp3.input_u_1 = pp1.output_dy1;
      pp4.input_u_1 = pp1.output_dy1;

      // p 2 to Other ps
      pp1.input_u_2 = pp2.output_dy1;
      pp3.input_u_2 = pp2.output_dy1;
      pp4.input_u_2 = pp2.output_dy1;

      // p 3 to Other ps
      pp1.input_u_3 = pp3.output_dy1;
      pp2.input_u_3 = pp3.output_dy1;
      pp4.input_u_3 = pp3.output_dy1;

      // p 4 to Other ps
      pp1.input_u_4 = pp4.output_dy1;
      pp2.input_u_4 = pp4.output_dy1;
      pp3.input_u_4 = pp4.output_dy1;

      // ps to e
      ee.input_pe1 = pp1.output_P_e;
      ee.input_pe2 = pp2.output_P_e;
      ee.input_pe3 = pp3.output_P_e;
      ee.input_pe4 = pp4.output_P_e;

      // cctrl to the e
      ee.input_pm1 = cctrl.output_pm1;
      ee.input_pm2 = cctrl.output_pm2;
      ee.input_pm3 = cctrl.output_pm3;
      ee.input_pm4 = cctrl.output_pm4;

      // e to cctrl
     cctrl.input_estimated_angle_FMU_1 = ee.output_states_1;
     cctrl.input_estimated_angle_FMU_2 = ee.output_states_2;
     cctrl.input_estimated_angle_FMU_3 = ee.output_states_3;
     cctrl.input_estimated_angle_FMU_4 = ee.output_states_4;
     cctrl.input_estimated_omega_FMU_1 = ee.output_states_5;
     cctrl.input_estimated_omega_FMU_2 = ee.output_states_6;
     cctrl.input_estimated_omega_FMU_1 = ee.output_states_7;
     cctrl.input_estimated_omega_FMU_2 = ee.output_states_8;

      pp2.tick(1.0);
      pp1.tick(1.0);
      pp4.tick(1.0);
      cctrl.tick(1.0);
      pp3.tick(1.0);
      ee.tick(1.0);

      count = count + stepSize;
      breakpoint; //outputs System.currentTimeMillis() as side-effect
      sscenario.disable(); //first iteration is good enough, all others have same algorithm
  end
  print("finished execution");
end