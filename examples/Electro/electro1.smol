main

    FMO[in Double input_u_1,
        in Double input_u_2,
        in Double input_u_3,
        in Double input_u_4,
        in Double input_u_5,
        in Double input_PM,
        out Double output_P_e,
        out Double output_dy1,
        out Double output_dy2] p1 = simulate("examples/Electro/fmus/powersystem.fmu", input_NSG = 5);
    p1.role = "powersystem1";

    print("<<<<<<<<< done power1 ");

    FMO[in Double input_u_1,
        in Double input_u_2,
        in Double input_u_3,
        in Double input_u_4,
        in Double input_u_5,
        in Double input_PM,
        out Double output_P_e,
        out Double output_dy1,
        out Double output_dy2] p2 = simulate("examples/Electro/fmus/powersystem.fmu", input_NSG = 5);
    p2.role = "powersystem2";

    print("<<<<<<<<< done power2 ");
    FMO[in Double input_u_1,
        in Double input_u_2,
        in Double input_u_3,
        in Double input_u_4,
        in Double input_u_5,
        in Double input_PM,
        out Double output_P_e,
        out Double output_dy1,
        out Double output_dy2] p3 = simulate("examples/Electro/fmus/powersystem.fmu", input_NSG = 5);
    p3.role = "powersystem3";

    print("<<<<<<<<< done power3 ");
    FMO[in Double input_u_1,
        in Double input_u_2,
        in Double input_u_3,
        in Double input_u_4,
        in Double input_u_5,
        in Double input_PM,
        out Double output_P_e,
        out Double output_dy1,
        out Double output_dy2] p4 = simulate("examples/Electro/fmus/powersystem.fmu", input_NSG = 5);
    p4.role = "powersystem4";


    print("<<<<<<<<< done power4 ");
    FMO[in Double input_u_1,
        in Double input_u_2,
        in Double input_u_3,
        in Double input_u_4,
        in Double input_u_5,
        in Double input_PM,
        out Double output_P_e,
        out Double output_dy1,
        out Double output_dy2] p5 = simulate("examples/Electro/fmus/powersystem.fmu", input_NSG = 5);
    p5.role = "powersystem5";
    print("<<<<<<<<< done power5");


    FMO[in Double input_estimated_angle_FMU_1,
        in Double input_estimated_angle_FMU_2,
        in Double input_estimated_angle_FMU_3,
        in Double input_estimated_angle_FMU_4,
        in Double input_estimated_angle_FMU_5,
        in Double input_estimated_omega_FMU_1,
        in Double input_estimated_omega_FMU_2,
        in Double input_estimated_omega_FMU_3,
        in Double input_estimated_omega_FMU_4,
        in Double input_estimated_omega_FMU_5,
        out Double output_pm1,
        out Double output_pm2,
        out Double output_pm3,
        out Double output_pm4,
        out Double output_pm5,
        out Double output_p_e_1,
        out Double output_p_e_2,
        out Double output_p_e_3,
        out Double output_p_e_4,
        out Double output_p_e_5
       ] ctrl = simulate("examples/Electro/fmus/controller.fmu", input_states = 10);
    ctrl.role = "controller";
    print("<<<<<<<<< done controller");


    FMO[in Double input_pm1,
        in Double input_pm2,
        in Double input_pm3,
        in Double input_pm4,
        in Double input_pm5,
        in Double input_pe1,
        in Double input_pe2,
        in Double input_pe3,
        in Double input_pe4,
        in Double input_pe5,
        in Double input_states_1,
        in Double input_states_2,
        in Double input_states_3,
        in Double input_states_4,
        in Double input_states_5,
        in Double input_states_6,
        out Double output_states_1,
        out Double output_states_2,
        out Double output_states_3,
        out Double output_states_4,
        out Double output_k2_1,
        out Double output_k2_2,
        out Double output_k3_1,
        out Double output_k3_2,
        out Double output_k4_1,
        out Double output_k4_2] e1 = simulate("examples/Electro/fmus/estimator_scen1_1.fmu");
    e1.role = "estimator_1";


    FMO[in Double input_pm1,
        in Double input_pm2,
        in Double input_pm3,
        in Double input_pm4,
        in Double input_pm5,
        in Double input_pe1,
        in Double input_pe2,
        in Double input_pe3,
        in Double input_pe4,
        in Double input_pe5,
        in Double input_states_1,
        in Double input_states_2,
        in Double input_states_3,
        in Double input_states_4,
        in Double input_k2_1,
        in Double input_k2_2,
        in Double input_k3_1,
        in Double input_k3_2,
        in Double input_k4_1,
        in Double input_k4_2,
        out Double output_states_1,
        out Double output_states_2,
        out Double output_states_3,
        out Double output_states_4,
        out Double output_states_5,
        out Double output_states_6] e2 = simulate("examples/Electro/fmus/estimator_scen1_2.fmu");
    e2.role = "estimator_2";

    print("finished loading");


    Scenario[controller, powersystem1, powersystem2, powersystem3, powersystem4, powersystem5, estimator_1, estimator_2]
       scenario = monitor("examples/Electro/scenario1.conf");

    scenario.assign(p1);
    scenario.assign(p2);
    scenario.assign(p3);
    scenario.assign(p4);
    scenario.assign(p5);
    scenario.assign(ctrl);
    scenario.assign(e1);
    scenario.assign(e2);

    print("finished scenario assignment");
    /*Boolean c = scenario.check();
    print(c);*/
    print("finished scenario check");

    Double stepSize = 0.001;
    Double count = 0.0;
    Double stop = 4.0;
    e2.input_k4_2 = e1.output_k4_2;
    e2.input_k3_1 = e1.output_k3_1;
    e2.input_k4_1 = e1.output_k4_1;
    Double v1 = ctrl.output_pm2;
    e1.input_pm2 = v1;
    p2.input_PM = v1;
    e2.input_pm2 = v1;
    Double v2 = e2.output_states_4;
    ctrl.input_estimated_omega_FMU_1 = v2;
    e1.input_states_4 = v2;
    e2.input_k2_2 = e1.output_k2_2;
    e2.input_k3_2 = e1.output_k3_2;
    Double v3 = e2.output_states_2;
    ctrl.input_estimated_angle_FMU_2 = v3;
    e1.input_states_2 = v3;
    Double v4 = e2.output_states_6;
    e1.input_states_6 = v4;
    ctrl.input_estimated_omega_FMU_3 = v4;
    Double v5 = e2.output_states_1;
    ctrl.input_estimated_angle_FMU_1 = v5;
    e1.input_states_1 = v5;
    print("finished init0");

    Double v6 = e1.output_states_2;
    ctrl.input_estimated_angle_FMU_5 = v6;
    e2.input_states_2 = v6;
    Double v7 = e1.output_states_1;
    ctrl.input_estimated_angle_FMU_4 = v7;
    e2.input_states_1 = v7;
    Double v8 = p5.output_P_e;
    e1.input_pe5 = v8;
    e2.input_pe5 = v8;
    Double v9 = e2.output_states_5;
    ctrl.input_estimated_omega_FMU_2 = v9;
    e1.input_states_5 = v9;
    print("finished init1");

    Double v10 = e2.output_states_3;
    e1.input_states_3 = v10;
    ctrl.input_estimated_angle_FMU_3 = v10;
    Double v11 = ctrl.output_pm1;
    p1.input_PM = v11;
    e1.input_pm1 = v11;
    e2.input_pm1 = v11;
    Double v12 = p2.output_P_e;
    e2.input_pe2 = v12;
    e1.input_pe2 = v12;
    Double v13 = p4.output_P_e;
    e1.input_pe4 = v13;
    e2.input_pe4 = v13;
    Double v14 = ctrl.output_pm5;
    e2.input_pm5 = v14;
    p5.input_PM = v14;
    e1.input_pm5 = v14;
    Double v15 = p3.output_dy1;
    p1.input_u_3 = v15;
    p5.input_u_3 = v15;
    p2.input_u_3 = v15;
    p4.input_u_3 = v15;
    Double v16 = ctrl.output_pm4;
    e2.input_pm4 = v16;
    e1.input_pm4 = v16;
    p4.input_PM = v16;
    Double v17 = ctrl.output_pm3;
    e1.input_pm3 = v17;
    p3.input_PM = v17;
    e2.input_pm3 = v17;
    e2.input_k2_1 = e1.output_k2_1;
    Double v18 = p1.output_P_e;
    e1.input_pe1 = v18;
    e2.input_pe1 = v18;
    Double v19 = p3.output_P_e;
    e2.input_pe3 = v19;
    e1.input_pe3 = v19;
    Double v20 = p5.output_dy1;
    p3.input_u_5 = v20;
    p4.input_u_5 = v20;
    p2.input_u_5 = v20;
    p1.input_u_5 = v20;
    Double v21 = p2.output_dy1;
    p3.input_u_2 = v21;
    p1.input_u_2 = v21;
    p4.input_u_2 = v21;
    p5.input_u_2 = v21;
    Double v22 = p4.output_dy1;
    p5.input_u_4 = v22;
    p1.input_u_4 = v22;
    p3.input_u_4 = v22;
    p2.input_u_4 = v22;
    Double v23 = e1.output_states_4;
    e2.input_states_4 = v23;
    ctrl.input_estimated_omega_FMU_5 = v23;
    Double v24 = p1.output_dy1;
    p2.input_u_1 = v24;
    p5.input_u_1 = v24;
    p4.input_u_1 = v24;
    p3.input_u_1 = v24;
    Double v25 = e1.output_states_3;
    ctrl.input_estimated_omega_FMU_4 = v25;
    e2.input_states_3 = v25;

    while count < stop do
    /*
p3.tick(stepSize);
Double x31 = p3.output_P_e;
p2.tick(stepSize);
Double x30 = p2.output_P_e;
Double x29 = p2.output_dy1;
p3.input_u_2 = x29;
Double x28 = p3.output_dy1;
p2.input_u_3 = x28;
p1.tick(stepSize);
Double x27 = p1.output_P_e;
p1.input_u_2 = x27;
p1.input_u_3 = x27;
Double x26 = p1.output_dy1;
p2.input_u_1 = x26;
p3.input_u_1 = x26;
p4.tick(stepSize);
Double x25 = p4.output_P_e;
p4.input_u_1 = x25;
Double x24 = p4.output_dy1;
p1.input_u_4 = x24;
p3.input_u_4 = x24;
p2.input_u_4 = x24;
p4.input_u_2 = x24;
p4.input_u_3 = x24;
ctrl.tick(stepSize);
Double x23 = ctrl.output_pm4;
p4.input_PM = x23;
Double x22 = ctrl.output_pm5;
Double x21 = ctrl.output_pm2;
p2.input_PM = x21;
Double x20 = ctrl.output_pm3;
p3.input_PM = x20;
Double x19 = ctrl.output_pm1;
p1.input_PM = x19;
e1.tick(stepSize);
Double x18 = e1.output_states_1;
ctrl.input_estimated_angle_FMU_4 = x18;
e1.input_pm3 = x18;
Double x17 = e1.output_k3_1;
e2.input_k3_1 = x17;
Double x16 = e1.output_k2_1;
e1.input_pe1 = x16;
e1.input_pm4 = x16;
Double x15 = e1.output_k3_2;
e2.input_k3_2 = x15;
Double x14 = e1.output_k2_2;
e1.input_pe2 = x14;
e1.input_pm2 = x14;
Double x13 = e1.output_k4_1;
e1.input_pe3 = x13;
e1.input_pe4 = x13;
Double x12 = e1.output_states_4;
ctrl.input_estimated_omega_FMU_5 = x12;
Double x11 = e1.output_k4_2;
e1.input_pm1 = x11;
e1.input_pm5 = x11;
Double x10 = e1.output_states_2;
ctrl.input_estimated_angle_FMU_5 = x10;
p5.tick(stepSize);
p5.input_u_4 = x10;
Double x9 = p5.output_P_e;
e1.input_pe5 = x9;
p5.input_u_3 = x9;
p5.input_PM = x9;
Double x8 = p5.output_dy1;
p3.input_u_5 = x8;
p4.input_u_5 = x8;
p2.input_u_5 = x8;
p1.input_u_5 = x8;
p5.input_u_1 = x8;
p5.input_u_2 = x8;
e2.tick(stepSize);
e2.input_k2_1 = x8;
e2.input_pm5 = x8;
e2.input_k3_1 = x8;
e2.input_k4_2 = x8;
Double x7 = e2.output_states_4;
ctrl.input_estimated_omega_FMU_1 = x7;
e1.input_states_4 = x7;
e2.input_pe4 = x7;
e2.input_states_4 = x7;
e2.input_pm3 = x7;
e2.input_states_2 = x7;
e2.input_pe5 = x7;
e2.input_k2_2 = x7;
Double x6 = e2.output_states_5;
ctrl.input_estimated_omega_FMU_2 = x6;
e1.input_states_5 = x6;
e2.input_pm4 = x6;
e2.input_pe2 = x6;
Double x5 = e2.output_states_2;
ctrl.input_estimated_angle_FMU_2 = x5;
e1.input_states_2 = x5;
Double x4 = e2.output_states_3;
e1.input_states_3 = x4;
ctrl.input_estimated_angle_FMU_3 = x4;
e2.input_k3_2 = x4;
e2.input_k4_1 = x4;
e2.input_pe3 = x4;
Double x3 = e2.output_states_1;
ctrl.input_estimated_angle_FMU_1 = x3;
e1.input_states_1 = x3;
e2.input_pe1 = x3;
e2.input_states_1 = x3;
e2.input_pm1 = x3;
Double x2 = e2.output_states_6;
e1.input_states_6 = x2;
ctrl.input_estimated_omega_FMU_3 = x2;
e2.input_pm2 = x2;
Double x1 = e1.output_states_3;
ctrl.input_estimated_omega_FMU_4 = x1;
e2.input_states_3 = x1;
*/

        p1.tick(stepSize);
        p2.tick(stepSize);
        p3.tick(stepSize);
        p4.tick(stepSize);
        p5.tick(stepSize);
        ctrl.tick(stepSize);
        e1.tick(stepSize);
        e2.tick(stepSize);

        // ctrl to ps
        p1.input_PM = ctrl.output_pm1;
        p2.input_PM = ctrl.output_pm2;
        p3.input_PM = ctrl.output_pm3;
        p4.input_PM = ctrl.output_pm4;
        p5.input_PM = ctrl.output_pm5;

        // p 1 to Other ps
        p2.input_u_1 = p1.output_dy1;
        p3.input_u_1 = p1.output_dy1;
        p4.input_u_1 = p1.output_dy1;
        p5.input_u_1 = p1.output_dy1;

        // p 2 to Other ps
        p1.input_u_2 = p2.output_dy1;
        p3.input_u_2 = p2.output_dy1;
        p4.input_u_2 = p2.output_dy1;
        p5.input_u_2 = p2.output_dy1;

        // p 3 to Other ps
        p1.input_u_3 = p3.output_dy1;
        p2.input_u_3 = p3.output_dy1;
        p4.input_u_3 = p3.output_dy1;
        p5.input_u_3 = p3.output_dy1;

        // p 4 to Other ps
        p1.input_u_4 = p4.output_dy1;
        p2.input_u_4 = p4.output_dy1;
        p3.input_u_4 = p4.output_dy1;
        p5.input_u_4 = p4.output_dy1;

        // p 5 to Other ps
        p1.input_u_5 = p5.output_dy1;
        p2.input_u_5 = p5.output_dy1;
        p3.input_u_5 = p5.output_dy1;
        p4.input_u_5 = p5.output_dy1;

        // ps to Estimator 1
        e1.input_pe1 = p1.output_P_e;
        e1.input_pe2 = p2.output_P_e;
        e1.input_pe3 = p3.output_P_e;
        e1.input_pe4 = p4.output_P_e;
        e1.input_pe5 = p5.output_P_e;

        // ctrl to Estimator - Mechanical Power
        e1.input_pm1 = ctrl.output_pm1;
        e1.input_pm2 = ctrl.output_pm2;
        e1.input_pm3 = ctrl.output_pm3;
        e1.input_pm4 = ctrl.output_pm4;
        e1.input_pm5 = ctrl.output_pm5;

        // ps to Estimator 2
        e2.input_pe1 = p1.output_P_e;
        e2.input_pe2 = p2.output_P_e;
        e2.input_pe3 = p3.output_P_e;
        e2.input_pe4 = p4.output_P_e;
        e2.input_pe5 = p5.output_P_e;

        // ctrl to Estimator - Mechanical Power
        e2.input_pm1 = ctrl.output_pm1;
        e2.input_pm2 = ctrl.output_pm2;
        e2.input_pm3 = ctrl.output_pm3;
        e2.input_pm4 = ctrl.output_pm4;
        e2.input_pm5 = ctrl.output_pm5;

        // Estimator 1 to Estimator 2
        e2.input_k2_1 = e1.output_k2_1;
        e2.input_k2_2 = e1.output_k2_2;
        e2.input_k3_1 = e1.output_k3_1;
        e2.input_k3_2 = e1.output_k3_2;
        e2.input_k4_1 = e1.output_k4_1;
        e2.input_k4_2 = e1.output_k4_2;
        e2.input_states_1 = e1.output_states_1;
        e2.input_states_2 = e1.output_states_2;
        e2.input_states_3 = e1.output_states_3;
        e2.input_states_4 = e1.output_states_4;

        // Estimator 1 to ctrl
        ctrl.input_estimated_angle_FMU_4 = e1.output_states_1;
        ctrl.input_estimated_angle_FMU_5 = e1.output_states_2;
        ctrl.input_estimated_omega_FMU_4 = e1.output_states_3;
        ctrl.input_estimated_omega_FMU_5 = e1.output_states_4;

        // Estimator 2 to Estimator 1
        e1.input_states_1 = e2.output_states_1;
        e1.input_states_2 = e2.output_states_2;
        e1.input_states_3 = e2.output_states_3;
        e1.input_states_4 = e2.output_states_4;
        e1.input_states_5 = e2.output_states_5;
        e1.input_states_6 = e2.output_states_6;

        // Estimator 2 to ctrl
        ctrl.input_estimated_angle_FMU_1 = e2.output_states_1;
        ctrl.input_estimated_angle_FMU_2 = e2.output_states_2;
        ctrl.input_estimated_angle_FMU_3 = e2.output_states_3;
        ctrl.input_estimated_omega_FMU_1 = e2.output_states_4;
        ctrl.input_estimated_omega_FMU_2 = e2.output_states_5;
        ctrl.input_estimated_omega_FMU_3 = e2.output_states_6;

        print(ctrl.input_estimated_angle_FMU_4);

        count = count + stepSize;
    end
    print("finished execution");
end