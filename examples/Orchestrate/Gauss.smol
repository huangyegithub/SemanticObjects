

//Wrapper for simulators: each simulator can have multiple ports
abstract class <T2> OutPort()
    abstract T2 get()
end
abstract class <T3> InPort()
    abstract Boolean write(T3 t)
end

//Co-sim connection
abstract class Connection()
    abstract Int propagate()
end

class ImplConnection extends Connection (OutPort<Double> from, InPort<Double> to)
    override Int propagate()
        Double val = this.from.get();
        this.to.write(val);
        return 0;
    end
end

//Gauss master algorithm: propagate through all FMUs, advance time for all FMUs at once
class CoSim(List<Connection> list, List<Cont[]> sims, Double stepSize)
    Int round()
        Int i = 0;
        if this.list == null then return i; end
        if this.sims == null then return i; end
        Int length = this.list.length();
        while i < length do
            Connection c = this.list.get(i);
            c.propagate();
            Cont[] de = this.sims.get(i); //note: we do check here that we do not advance twice if an FMU has two output connections
            de.doStep(this.stepSize);
            i = i+1;
        end
        return i;
    end

    Int execute(Int steps)
        Int i = 1;
        while( i <= steps ) do
            this.round();
            i = i+1;
        end
        return i;
    end
end

//example
class PreyOutPort extends OutPort<Double>(Cont[in Double y, out Double x] x)
    override Double get() return this.x.x; end
end
class PredatorOutPort extends OutPort<Double>(Cont[in Double x, out Double y] y)
    override Double get() return this.y.y; end
end
class PreyInPort extends InPort<Double>(Cont[in Double y, out Double x] y)
    override Boolean write(Double t) this.y.y = t; return True; end
end
class PredatorInPort extends InPort<Double>(Cont[in Double x, out Double y] x)
    override Boolean write(Double t) print(t); this.x.x = t; return True; end
end

main
    Cont[in Double y, out Double x] prey = simulate("examples/SimulationDemo/Prey.fmu", y = 10);
    Cont[in Double x, out Double y] predator = simulate("examples/SimulationDemo/Predator.fmu", x = 10);
    PreyOutPort preyOut = new PreyOutPort(prey);
    PredatorOutPort predOut = new PredatorOutPort(predator);
    PreyInPort preyIn = new PreyInPort(prey);
    PredatorInPort predIn = new PredatorInPort(predator);
    Connection c1 = new ImplConnection(preyOut, predIn);
    Connection c2 = new ImplConnection(predOut, preyIn);
    List<Cont[]> fmus = new List<Cont[]>(prey, null);
    fmus = new List<Cont[]>(predator, fmus);
    List<Connection> cons = new List<Connection>(c1, null);
    cons = new List<Connection>(c2, cons);
    CoSim sim = new CoSim(cons, fmus, 0.05);
    sim.execute(4000);

    List<InPort<Double>> ll = access("SELECT ?obj WHERE {?con a prog:ImplConnection. ?con prog:ImplConnection_to ?obj}");
    while ll != null do
        InPort<Double> inp = ll.content;
        ll = ll.next;
        print(inp);
    end
end
